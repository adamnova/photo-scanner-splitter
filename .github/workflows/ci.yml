name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  quality-checks:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black ruff mypy
        pip install -r requirements.txt
    
    - name: Check code formatting with Black
      run: |
        black --check --diff photo_splitter/ tests/
    
    - name: Lint with Ruff
      run: |
        ruff check photo_splitter/ tests/
    
    - name: Type check with mypy
      run: |
        mypy photo_splitter/ --install-types --non-interactive || true
      continue-on-error: true

  test:
    name: Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
        pip install -r requirements.txt
    
    - name: Install package
      run: |
        pip install -e .
    
    - name: Verify installation
      run: |
        python -c "import photo_splitter; print('Photo Splitter version:', photo_splitter.__version__ if hasattr(photo_splitter, '__version__') else 'dev')"
        which photo-splitter || echo "CLI not found in PATH"

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-py${{ matrix.python-version }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-py${{ matrix.python-version }}-pip-
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        python -m unittest discover tests -v
    
    - name: Test package installation
      run: |
        pip install -e .
        which photo-splitter || true
        photo-splitter --help || echo "CLI help check completed"

  test-coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install coverage
        pip install -r requirements.txt
    
    - name: Run tests with coverage
      run: |
        coverage run -m unittest discover tests -v
        coverage report -m
        coverage xml
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: always()
      continue-on-error: true
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    - name: Install package
      run: |
        pip install -e .
    
    - name: Run tests
      run: |
        python -m unittest discover tests -v
